from app import app
from flask import render_template, request, jsonify, redirect, send_from_directory, sessions
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
import json
from flask_wtf import FlaskForm 
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import FlaskForm 
from flask_bootstrap import Bootstrap
from wtforms import StringField, PasswordField, BooleanField
from wtforms.validators import InputRequired, Email, Length
from werkzeug.security import generate_password_hash, check_password_hash
from flask_cors import CORS, cross_origin
import os
import sqlite3
bootstrap = Bootstrap(app)
db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

app.config['SECRET_KEY'] = 'Thisissupposedtobesecret!'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////Users/zach/Documents/Coding Projects/malware_backend/db/database.db'

db_path = '/Users/zach/Documents/Coding Projects/malware_backend/db/database.db'

cors = CORS(app)
app.config['CORS_HEADERS'] = 'Content-Type'

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(15), unique=True)
    email = db.Column(db.String(50), unique=True)
    password = db.Column(db.String(80))
    agents = db.Column(db.Text())

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

class LoginForm(FlaskForm):
    username = StringField('username', validators=[InputRequired(), Length(min=4, max=15)])
    password = PasswordField('password', validators=[InputRequired(), Length(min=4, max=80)])
    remember = BooleanField('remember me')

class RegisterForm(FlaskForm):
    email = StringField('email', validators=[InputRequired(), Email(message='Invalid email'), Length(max=50)])
    username = StringField('username', validators=[InputRequired(), Length(min=4, max=15)])
    password = PasswordField('password', validators=[InputRequired(), Length(min=4, max=80)])

@app.route('/login', methods=['GET', 'POST'])
@cross_origin()
def login():
    username = request.get_json()['user']
    password = request.get_json()['pass']
    user = User.query.filter_by(username=username).first()
    if user:
        if check_password_hash(user.password, password):
            login_user(user)

        return jsonify('loggedin')
        
@app.route('/signup', methods=['GET', 'POST'])
@cross_origin()
def signup():
    user = request.get_json()['user']
    email = request.get_json()['email']
    password = request.get_json()['pass']

    print(user, password)
    hashed_password = generate_password_hash(password, method='sha256')
    #abpath = os.path.abspath(os.getcwd())

    new_user = User(username=user, email=email, password=hashed_password)
    db.session.add(new_user)
    db.session.commit()

    return jsonify('New user created')

@app.route('/testDB')
@cross_origin()
def testDB():
    currentUser = str(current_user.get_id())
    dataToDump = [{
                    "id": 4,
                    "name":4,
                    "ip":{
                        "internal": '192.168.x.x',
                        "mac_address": 'DA:E3:XX:XX',
                        "external": '47.xx.xx.xx'
                    },
                }]
    if current_user.get_id() != '':
        with sqlite3.connect(db_path) as con:
            c = con.cursor()
            c.execute('SELECT agents from user WHERE ID=?', (currentUser))
            res = c.fetchall()
            res = str(res)
            res =res.replace("[('", '')
            res= res.replace("',)]", "")
            res = json.loads(res)
            dataToDump.append(res)
            c.execute('UPDATE user SET agents=? WHERE ID=?', (
               json.dumps(dataToDump), currentUser))
            # con.commit()
            return 'success'
    return 'error'